### Lab 3 Solution ###

## Riddle 1 ##
package labs;

public class lab3 {

	public static void main(String[] args) {
		// Do not change the main function!
		System.out.println(riddle1(2));
		System.out.println(riddle1(5));
		System.out.println(riddle1(4));
		System.out.println(riddle1(80));
		System.out.println(riddle1(55));
		System.out.println(riddle1(66));
		System.out.println(riddle1(67));
	}



	public static boolean riddle1(int n) {
    if(n<=0)
        return false;

    while(n>2){
        int t = n>>1;
        int c = t<<1;

        if(n-c != 0)
            return false;

        n = n>>1;
    }

    return true;
	}
	// Better solution

	public boolean isPowerOfTwoBetter(int n) {
	    return n>0 && (n&n-1)==0;
	}
}

## Riddle 2 ##

public static void main(String[] args) {
  // Do not change the main function!
  System.out.println(riddle2(1));
  System.out.println(riddle2(5));
  System.out.println(riddle2(6));
  System.out.println(riddle2(18));
  System.out.println(riddle2(21));
  System.out.println(riddle2(30));
  System.out.println(riddle2(23));
  System.out.println(riddle2(37));
  System.out.println(riddle2(45));
}


public static boolean riddle2(int num) {
  for (int i = 2; i < num; i++) {
    if (num % i == 0) {
      return false; // if number is divisible then its not a prime number
    }
  }
  return true; // if no divisible found then the number is prime number
}
}

## Riddle 3 ##
public static void main(String[] args) {
  // Do not change the main function!
  riddle3(1);
  riddle3(2);
  riddle3(3);
  riddle3(4);
  riddle3(5);
}

public static void riddle3(int rows) {
int number = 1;
for (int i = 1; i <= rows; i++) {
  for (int j = 1; j <= i; j++) {
    System.out.print(number + " "); number++;

  }
  System.out.println();
}
}

## Riddle 4 ##
public static int binarySearch(int arr[], int l, int r, int x)
  {

      if (r >= l) {
          int mid = l + (r - l) / 2;

          // If the element is present at the
          // middle itself
          if (arr[mid] == x)
              return mid;

          // If element is smaller than mid, then
          // it can only be present in left subarray
          if (arr[mid] > x)
              return binarySearch(arr, l, mid - 1, x);

          // Else the element can only be present
          // in right subarray
          return binarySearch(arr, mid + 1, r, x);
      }

      // We reach here when element is not present
      // in array
      return -1;
  }
	public static boolean riddle4 (int arr[], int x)
	{
		int l = 0;
		int r = arr.length-1;
		if (binarySearch(arr,l, r, x )==-1) {
			return false;
		}
		return true;
	}

## Riddle 5
public static void main(String[] args) {
  // Do not change the main function!
  riddle5(1);
  riddle5(2);
  riddle5(3);
  riddle5(4);
  riddle5(5);
  riddle5(6);
  riddle5(7);
}

public static void riddle5(int count) {
      int num1 = 0, num2 = 1;

      int i=1;
      while(i<=count)
      {
          System.out.print(num1+" ");
          int sumOfPrevTwo = num1 + num2;
          num1 = num2;
          num2 = sumOfPrevTwo;
          i++;
      }
      System.out.println();
}
